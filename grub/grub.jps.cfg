# Multiboot USB Stick grub.cfg

# Required with MBR for GUI
if [ "${grub_platform}" = "pc" ]; then
  insmod vbe
fi

## Required with EFI for GUI and to prevent "No video mode set" error
#if [ "${grub_platform}" = "efi" ]; then
#  insmod efi_gop
#fi

# Keep the same graphic mode for kernel booting (passed as vga=)
# other values are "text" or any gfxmode value
set gfxpayload=keep

# Enable GUI
#terminal_output gfxterm

#EFI: special characters (lines composing menu frame)
#replaced by '?' in text _fallback_ text mode if absent
# (useless if gfxterm is not enabled or if GUI theme loading success)
#loadfont ascii

# Timeout for menu; set to -1 for "infinite"
set timeout=-1

# Default boot entry
set default=0

# Menu Colours
set menu_color_normal=white/black
set menu_color_highlight=white/green

# Setup to allow console AND serial redirect on Dell M1000E CMC console:
#serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1
#terminal_input console serial
#terminal_output console serial
#set CMCCONSOLE="console=tty0 console=ttyS0,115200n8"
# Then, for most LINUXen, append "$CMCCONSOLE" to "linux" entry.

# Typical recipes:
# * vmlinuz : add findiso=$iso to end


# ---- UBUNTU ----
# For GA v. HWE discussion: https://askubuntu.com/questions/248914/what-is-hardware-enablement-hwe
#  - GA == General Availablility / HWE - Hardware Enablement
#
# Download ISOs from https://www.ubuntu.com
submenu 'Ubuntu >>' {
 # 18.04
 menuentry "Ubuntu Live CD - 18.04 LTS - 64bit Desktop" {
     set iso="/iso/ubuntu-18.04.1-desktop-amd64.iso"
     loopback loop $iso
     linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=$iso noprompt noeject splash --
     initrd (loop)/casper/initrd.lz
 }

 menuentry "Ubuntu Live CD - 18.04 LTS - 64bit Server" {
     set iso="/iso/ubuntu-18.04.1-live-server-amd64.iso"
     loopback loop $iso
     linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=$iso noprompt noeject --
     initrd (loop)/casper/initrd
 }

  # 16.04 Xenial LTS - https://help.ubuntu.com/community/Installation/MinimalCD
  menuentry "Ubuntu 16.04/Xenial LTS - 64bit Mini-Installer - GA" {
      set iso="/iso/ubuntu-mini-16.04-amd64.iso"
      loopback loop $iso
      linux (loop)/linux boot=casper iso-scan/filename=$iso noprompt noeject
      initrd (loop)/initrd.gz
  }

  menuentry "Ubuntu 16.04/Xenial LTS - 32bit Mini-Installer - GA" {
      set iso="/iso/ubuntu-mini-16.04-i386.iso"
      loopback loop $iso
      linux (loop)/linux boot=casper iso-scan/filename=$iso noprompt noeject
      initrd (loop)/initrd.gz
  }
}

# ---- Others/Utility ----

menuentry "" { true }

# GParted - http://gparted.org/download.php
# see also: https://github.com/thias/glim/blob/master/grub2/inc-gparted.cfg
submenu 'GParted Live - Partition Editor >>' {
  menuentry "GParted Live 0.31.1 AMD64" {
    set iso="/iso/gparted-live-0.31.0-1-amd64.iso"
    loopback loop "($root)$iso"
    linux (loop)/live/vmlinuz boot=live union=overlay username=user config components noswap ip= net.ifnames=0 nosplash findiso=$iso
    initrd (loop)/live/initrd.img
  }

  menuentry "GParted Live 0.31.0 i686" {
    set iso="/iso/gparted-live-0.31.0-1-i686.iso"
    loopback loop $iso
    linux (loop)/live/vmlinuz boot=live config union=aufs noswap noprompt ip=frommedia toram=filesystem.squashfs findiso=$iso
    initrd (loop)/live/initrd.img
  }
}

# Clonezilla - https://clonezilla.org/downloads.php
submenu 'Clonezilla >>' {
  menuentry "2.5.5-38 64-bit" --class clonezilla {
    set iso="/iso/clonezilla-live-2.5.5-38-amd64.iso"
    loopback loop $iso
    linux (loop)/live/vmlinuz boot=live findiso=${iso} union=overlay components quiet toram=live,syslinux
    initrd (loop)/live/initrd.img
  }

  menuentry "2.5.5-38 32-bit" --class clonezilla {
    set iso="/iso/clonezilla-live-2.5.5-38-i686.iso"
    loopback loop $iso
    linux (loop)/live/vmlinuz boot=live findiso=${iso} union=overlay components quiet toram=live,syslinux
    initrd (loop)/live/initrd.img
  }

  # Clonezilla - http://clonezilla.org/clonezilla-live.php
  # copied "to RAM" option, adding standard "findiso=$iso"
  menuentry "2.5.5-38 to RAM 64-bit" {
      set iso="/iso/clonezilla-live-2.5.5-38-amd64.iso"
      loopback loop $iso
      search --set -f /live/vmlinuz
  #    linux (loop)/live/vmlinuz boot=live username=user config quiet noswap edd=on nomodeset nodmraid noeject locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch=no vga=791 ip=  nosplash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1 findiso=$iso
      linux (loop)/live/vmlinuz boot=live username=user config quiet noswap edd=on nomodeset nodmraid noeject locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch=no gfxpayload=1280x1024x16,1280x1024 ip=  nosplash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1 findiso=$iso
      initrd (loop)/live/initrd.img
  }

}


# SystemRescueCD - http://www.system-rescue-cd.org/Download/
# menu entries from http://www.system-rescue-cd.org/Installing-SystemRescueCd-on-a-USB-stick/
submenu 'SystemRescueCD 5.2.2 >>' {
  set iso="/iso/systemrescuecd-x86-5.2.2.iso"
  menuentry "SystemRescueCd std-32bit" {
    loopback loop "($root)$iso"
    linux (loop)/isolinux/rescue32
    initrd (loop)/isolinux/initram.igz
  }

  menuentry "SystemRescueCd std-64bit" {
    loopback loop "($root)$iso"
    linux (loop)/isolinux/rescue64
    initrd (loop)/isolinux/initram.igz
  }

  menuentry "SystemRescueCd alt-32bit" {
    loopback loop "($root)$iso"
    linux (loop)/isolinux/altker32
    initrd (loop)/isolinux/initram.igz
  }

  menuentry "SystemRescueCd alt-64bit" {
    loopback loop "($root)$iso"
    linux (loop)/isolinux/altker64
    initrd (loop)/isolinux/initram.igz
  }

  menuentry "MemTest+" {
    loopback loop "($root)$iso"
    linux (loop)/isolinux/memtestp
    initrd (loop)/bootdisk/initrd.cgz
  }

  menuentry "NT Password Editor" {
    loopback loop "($root)$iso"
    linux (loop)/ntpasswd/vmlinuz
    initrd (loop)/ntpasswd/initrd.cgz
  }

  menuentry "Gag" {
    loopback loop "($root)$iso"
    linux (loop)/isolinux/memdisk
    initrd (loop)/bootdisk/gag.img
  }

  menuentry "MHDD" {
    loopback loop "($root)$iso"
    linux (loop)/isolinux/memdisk
    initrd (loop)/bootdisk/mhdd.img
  }

  menuentry "Hardware Detection Tool" {
    loopback loop "($root)$iso"
    linux (loop)/isolinux/memdisk
    initrd (loop)/bootdisk/hdt.img
  }

  menuentry "Aida" {
    loopback loop "($root)$iso"
    linux (loop)/isolinux/memdisk
    initrd (loop)/bootdisk/aida.img
  }

  menuentry "Ranish Partition Manager" {
    loopback loop "($root)$iso"
    linux (loop)/isolinux/memdisk
    initrd (loop)/bootdisk/ranish.img
  }

  menuentry "FreeDOS" {
    loopback loop "($root)$iso"
    linux (loop)/isolinux/memdisk
    initrd (loop)/bootdisk/freedos.img
  }

}

# DBAN - http://www.dban.org/download
menuentry "Darik's Boot and Nuke" {
    set iso="/iso/dban-2.3.0_i586.iso"
    loopback loop $iso
    linux (loop)/DBAN.BZI nuke="dwipe"
}


# "Default" entries:

menuentry ' ' { true } # empty line
# Chainloading - sort of works; notes:
# - https://wiki.gentoo.org/wiki/GRUB2/Chainloading
# - https://unix.stackexchange.com/questions/343632/uefi-chainloading-grub-from-grub
# - https://www.gnu.org/software/grub/manual/grub/grub.html#configfile
# - https://askubuntu.com/questions/320810/what-is-the-recommended-way-to-chainload-separate-ubuntu-boot-partition
menuentry "Chainload Next Disk (hd1,msdos1/sdb1)" {
  insmod chain
  insmod part_msdos
  insmod ext2
  insmod lvm
  #set root=(hd1,msdos1)
  #chainloader +1
  #chainloader (hd1,msdos1)+1
  configfile (hd1,msdos1)/grub/grub.cfg
}
menuentry "Shutdown" --class shutdown { halt   }
menuentry "Reboot" --class shutdown   { reboot }

# EOF grub.cfg
